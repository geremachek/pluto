#!/usr/bin/env python3

from curses import *
from os import *
from shutil import *
from sys import *
import os.path
import io

cwd = getcwd()
cfiles = listdir(cwd)

home = os.path.expanduser("~")

chdir(home)

s = initscr()

comment = False

file_color=0
dir_color=13
cwd_color=0
sel_fmt=A_REVERSE
cwd_fmt=A_BOLD
exit_key="q"
del_key="d"
rename_key="x"
move_key="m"
shidden=False
thidden="."
up=KEY_UP
down=KEY_DOWN
left=KEY_LEFT
right=KEY_RIGHT

macros = {}
mackeys = []

dirs = []

if os.path.isfile(".config/pluto/config"):
    chdir(".config/pluto")
    with io.open("config", "r") as config:
        for line in config:
            if line[0] == "#" or line.isspace() or len(line) == 0:
                continue
            elif "=" in list(line) and "#" not in list(line):
                cvar = line.split("=")[0]
                cval = line.split("=")[1]
                if cvar == "exit":
                    exit_key = str(cval.rstrip())
                elif cvar == "del":
                    del_key = str(cval.rstrip())
                elif cvar == "move":
                    move_key = str(cval.rstrip())
                elif cvar == "sel":
                    if cval.rstrip() == "dim":
                        sel_fmt=A_DIM
                    elif cval.rstrip() == "rev":
                        sel_fmt=A_REVERSE
                    elif cval.rstrip() == "bold":
                        sel_fmt=A_BOLD
                    elif cval.rstrip() == "underline":
                        sel_fmt=A_UNDERLINE
                elif cvar == "show-hidden":
                    if cval.rstrip() == "true":
                        shidden=True
                    elif cval.rstrip() == "false":
                        shidden=False
                elif cvar == "toggle-hidden":
                    thidden == str(cval.rstrip())
                elif cvar == "move":
                    move_key == str(cval.rstrip())
                elif cvar == "up":
                    if str(cval.rstrip()) == "up":
                        up=KEY_UP
                    else:
                        up=str(cval.rstrip())
                elif cvar == "down":
                    if str(cval.rstrip()) == "down":
                        down=KEY_DOWN
                    else:
                        down=str(cval.rstrip())
                elif cvar == "left":
                    if str(cval.rstrip()) == "left":
                        left=KEY_LEFT
                    else:
                        left=str(cval.rstrip())
                elif cvar == "right":
                    if str(cval.rstrip()) == "right":
                        right=KEY_RIGHT
                    else:
                        right=str(cval.rstrip())
                elif line[0:5] == "macro":
                    mdir = line.split(":")[1].split("=")[0]
                    mkey = line.split(":")[1].split("=")[1]
                    macros.update({mkey.rstrip(): mdir})
                elif cvar == "theme":
                    if os.path.isdir("themes"):
                        chdir("themes")
                        with io.open(cval.rstrip() + ".plut", "r") as theme:
                            for line in theme:
                                if line[0] == "#" or line.isspace() or len(line) == 0:
                                    continue
                                elif "=" in list(line) and "#" not in list(line):
                                    cvar = line.split("=")[0]
                                    cval = line.split("=")[1]
                                    if cvar == "file":
                                        file_color = int(cval)
                                    elif cvar == "dir":
                                        dir_color = int(cval)
                                    elif cvar == "cwd-color":
                                        cwd_color = int(cval)
                                    elif cvar == "cwd-format":
                                        if str(cval.rstrip()) == "rev":
                                            cwd_fmt = A_REVERSE
                                        elif str(cval.rstrip()) == "bold":
                                            cwd_fmt = A_BOLD
                                        elif str(cval.rstrip()) == "underline":
                                            cwd_fmt = A_UNDERLINE
                                        elif str(cval.rstrip()) == "dim":
                                            cwd_fmt = A_DIM
                elif cvar == "rename":
                    rename_key = str(cval.rstrip())
            else:
                endwin()
                print("\033[101mError -->\033[0m " + "\033[1m" + line.rstrip() + "\033[0m is invalid")
                exit()

my, mx = s.getmaxyx()

index=0

chdir(cwd)

cv=2
bottom=my-2
top=3
off=1

cfile = 0
cy, cx = top, 1

count=cv

sc1 = bottom
sc2 = 0

new=[]

scrolled = False

end=False

start_color()

use_default_colors()

curs_set(0)

moving = False

move_file=""

for i in range(0, 256):
    init_pair(i + 1, i, -1)

def gcwd():
    s.move(1,off)
    if home in cwd:
        gcwd = cwd.split(home)
        gcwd[0] = "~"
        gcwd = str1 = ''.join(gcwd)
    else:
        gcwd = cwd
    if moving == False:
        s.addstr(str(gcwd), color_pair(cwd_color) + cwd_fmt)
        s.move(1,len(gcwd)+off)
        s.addstr("       ")
    else:
        s.addstr(str(gcwd) + " - move", color_pair(cwd_color) + cwd_fmt)

def sclear():
    s.move(cy, cx)
    for iy in range(0, my):
        s.move(0, iy)
        for ix in range(0, mx):
            s.addstr(" ")
            s.move(iy , ix)

def notempty(ndir):
    chdir(ndir)
    ncwd = getcwd()
    ncf = listdir(ncwd)
    chdir("..")
    return len(ncf) != 0

def getkeys():
    for key in macros:
        mackeys.append(key.rstrip())

def dots():
    global cfiles, dirs
    dirs.clear()
    if shidden == False:
        index = 0
        while index < len(cfiles):
            files = cfiles[index]
            if files[0] == ".":
                cfiles.pop(cfiles.index(files))
            else:
                index += 1
        index=0
        while index < len(cfiles):
            files = cfiles[index]
            if os.path.isdir(files):
                cfiles.pop(cfiles.index(files))
                dirs.append(files)
            else:
                index += 1
        dirs = sorted(dirs, key=lambda s: s.lower())
        nc = sorted(cfiles, key=lambda s: s.lower())
        cfiles.clear()
        cfiles = dirs + nc
    else:
        index=0
        while index < len(cfiles):
            files = cfiles[index]
            if os.path.isdir(files):
                cfiles.pop(cfiles.index(files))
                dirs.append(files)
            else:
                index += 1
        dirs = sorted(dirs, key=lambda s: s.lower())
        nc = sorted(cfiles, key=lambda s: s.lower())
        cfiles.clear()
        cfiles = dirs + nc       
        pass

def disp_c():
    global count, cfiles, files
    count = top-1
    for files in cfiles:
        if count != bottom:
            count += 1
            s.move(count, off)
            if os.path.isdir(files):
                s.addstr(files, color_pair(dir_color))
            else:
                s.addstr(files, color_pair(file_color))
            s.move(count,off)
        else:
            break

def disp_n():
    global count, cfiles, files
    count = cv
    for files in new:
        if count != bottom:
            count += 1
            s.move(count, off)
            if os.path.isdir(files):
                s.addstr(files, color_pair(dir_color))
            else:
                s.addstr(files, color_pair(file_color))
            s.move(count,off)
        else:
            break

def sel(numb, dt):
    if dt == "c":
        dt = cfiles
    elif dt == "n":
        dt = new
    if os.path.isdir(dt[numb]):
        s.addstr(dt[numb], color_pair(dir_color) + sel_fmt)
        s.move(cy,off)
    else:
        s.addstr(dt[numb], color_pair(file_color) + sel_fmt)
        s.move(cy,off)

def dsel(numb, dt):
    if dt == "c":
        dt = cfiles
    elif dt == "n":
        dt = new
    if os.path.isdir(dt[numb]):
        s.addstr(dt[numb], color_pair(dir_color))
        s.move(cy,off)
    else:
        s.addstr(dt[numb], color_pair(file_color))
        s.move(cy,off)

getkeys()

noecho()
s.keypad(1)

dots()

s.move(top, off)

disp_c()

s.move(top,off)

sel(0, "c")

gcwd()

s.move(top, off)

while True:
    key = s.getch()
    if key == ord(exit_key):
        endwin()
        exit()
    elif key == down == KEY_DOWN and key == down or str(down).isalpha() and key == ord(down):
        if cfile != len(cfiles)-1 and cy != bottom and scrolled == False:
            dsel(cfile, "c")

            cfile += 1
            cy += 1 
            s.move(cy, off)
            sel(cfile, "c")
        else:
            if cfile == len(new)-1 or new[-top:] == cfiles[-1:] and cy == bottom:
                end=True
                continue
            elif cy == bottom and end == False:
                scrolled = True
                sclear()
                sc2 += 1
                sc1 += 1
                new = cfiles[sc2:sc1]
                s.move(top,off)
                count=cv
                disp_n()
                sel(cfile, "n")
                gcwd()
                s.move(my-2, off)

            elif cy != bottom and scrolled == True:
                dsel(cfile, "n")

                cfile += 1
                cy += 1 
                s.move(cy, 1)
                sel(cfile, "n")

                gcwd()
                s.move(cy, off)
                
                
    elif up == KEY_UP and key == up or str(up).isalpha() and key == ord(up):
            if cfile != 0 and cy != top and scrolled == False:
                dsel(cfile, "c")

                cfile -= 1
                cy -= 1 
                s.move(cy, off)
                sel(cfile, "c")
            else:
                if scrolled == False:
                    continue
                elif scrolled == True:
                    if cy != top:
                        dsel(cfile, "n")

                        cfile -= 1
                        cy -= 1 
                        s.move(cy, off)
                        sel(cfile, "n")
                    elif cy == top and cfiles[0] != new[0]:
                        sclear()
                        sc2 -= 1
                        sc1 -= 1
                        new = cfiles[sc2:sc1]
                        s.move(top,off)
                        
                        disp_n()

                        s.move(top,off)
                        cfile=0

                        sel(cfile, "n")

                        gcwd()
                        s.move(cy, off)

                    else:
                        continue

    elif right == KEY_RIGHT and key == right or str(right).isalpha() and key == ord(right):
        end = False
        scrolled == False
        if os.path.isdir(cfiles[cfile]) and notempty(cfiles[cfile]) or scrolled == True and os.path.isdir(new[cfile]) and notempty(new[cfile]):
            sclear()
            s.refresh()
            if scrolled == False:
                chdir(cfiles[cfile])
            else:
                chdir(new[cfile])
            scrolled = False
            cwd = getcwd()
            cfiles.clear()
            new.clear()
            cfiles = listdir(cwd)
            cfile = 0
            cy, cx = top, off
            s.move(top,off)

            count=cv

            index=0

            dots()

            disp_c()
            s.move(top,off)

            sel(0, "c")
            gcwd()
            s.move(top, off)            

        else:
            continue
    elif left == KEY_LEFT and key == left or str(left).isalpha() and key == ord(left):
        scrolled = False
        end = False
        sc1 = bottom
        sc2 = 0
        sclear()
        s.refresh()
        chdir("..")
        cwd = getcwd()
        cfiles.clear()
        new.clear()
        cfiles = listdir(cwd)
        cfile = 0
        cy, cx = top, off
        s.move(top,off)

        count=cv

        index=0

        dots()

        disp_c()
            
        s.move(top,1)            

        sel(0, "c")
        
        gcwd()
        s.move(top, off)        

    elif key == ord(del_key):
        if scrolled == False:
            system("rm -rf " + cfiles[cfile])
            sclear()
            cwd = getcwd()
            cfiles.clear()
            cfiles = listdir(cwd)

            index=0
    
            dots()

            disp_c()

            if cy != top:
                cy -= 1
                cfile -= 1
                s.move(cy, off)
            else:
                s.move(cy, off)
                cfile = 0

            sel(cfile, "c")

            gcwd()
            s.move(cy, off)

        elif scrolled == True:
            system("rm -rf " + new[cfile])
            sclear()
            cwd = getcwd()
            cfiles.clear()
            new.clear()
            cfiles = listdir(cwd)
            
            sc2 -= 1
            sc1 -= 1

            index=0
    
            dots()

            count=cv
            
            new = cfiles[sc2:sc1]

            disp_n()
            
            gcwd()

            if cy == top:
                cy = top
                s.move(cy, off)
            else:
                s.move(cy, off)
            sel(cfile, "n")

    elif key == ord(move_key):
        if moving == False:
            
            move_cwd = cwd

            if scrolled == True:
                move_file = new[cfile]
            else:
                move_file = cfiles[cfile]

            moving = True
        else:
            moving = False
            move(move_cwd + "/" + move_file, cwd + "/" + move_file)

            cwd = getcwd()
            cfiles.clear()
            new.clear()
            new = cfiles
            cfiles = listdir(cwd)
            dots()

            sclear()
            cy = top
            sc1 = bottom
            sc2 = 0
            cfile=0
            index = 0
            scrolled = False

            disp_c()

            s.move(cy, off)

            sel(cfile, "c")

        gcwd()
        s.move(cy, off)
    elif chr(key) in mackeys:
        scrolled = False
        end = False
        sc1 = bottom
        sc2 = 0
        sclear()
        s.refresh()
        chdir(macros.get(str(chr(key))))
        cwd = getcwd()
        cfiles.clear()
        new.clear()
        cfiles = listdir(cwd)
        cfile = 0
        cy, cx = top, off
        s.move(top,off)

        count=cv

        index=0

        dots()

        disp_c()
            
        s.move(top,off)

        sel(0, "c")
        
        gcwd()
        s.move(top, off)
    elif key == ord(thidden):
        if shidden == True:
            shidden = False
        else:
            shidden = True
        scrolled = False
        end = False
        sc1 = bottom
        sc2 = 0
        sclear()
        s.refresh()
        cwd = getcwd()
        cfiles.clear()
        new.clear()
        cfiles = listdir(cwd)
        cfile = 0
        cy, cx = top, off
        s.move(top,off)

        count=cv

        index=0

        dots()

        disp_c()
            
        s.move(cy,1)            

        sel(0, "c")

        gcwd()
        s.move(cy,off)
    else:    
        continue
endwin()
